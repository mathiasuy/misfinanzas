/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mathiasbattistella.vista.jpanels;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import mathiasbattistella.controlador.CMovimientoMensual;
import mathiasbattistella.dto.MovimientoMensual;

/**
 *
 * @author user6
 */
public class PListadoImpagos extends javax.swing.JPanel {
    private ArrayList<MovimientoMensual> lista_movimientos_mensuales;
    /**
     * Creates new form PanelVerImpagos
     */
    
    public PListadoImpagos() {
        initComponents();
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnActualizar = new javax.swing.JToggleButton();
        ddlOpcion = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Ver Movimientos Impagos de más viejo a más reciente");

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        ddlOpcion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Vencidos", "Al día" }));
        ddlOpcion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ddlOpcionItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                        .addComponent(ddlOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnActualizar)
                    .addComponent(ddlOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * ORdena los movimientos en forma descendente por fecha de vencimiento
     * @param lista_movimientos 
     */
    private void ordenar(ArrayList<MovimientoMensual> lista_movimientos){
        MovimientoMensual temp;
        for (int i = 0; i < lista_movimientos.size(); i++) {
            for (int j = i+1; j < lista_movimientos.size(); j++) {
                if (lista_movimientos.get(i).getFecha_de_vencimiento().
                        compareTo(lista_movimientos.get(j).getFecha_de_vencimiento())>0){
                    temp = lista_movimientos.get(i);
                    lista_movimientos.set(i, lista_movimientos.get(j));
                    lista_movimientos.set(j, temp);
                }
                    
            }
        }
    }
    
    /**
     * Crea otra lista sin los movimientos ya pagos
     * @param lista_movimientos
     * @return 
     */
    private ArrayList<MovimientoMensual> filtrar(ArrayList<MovimientoMensual> lista_movimientos){
        ArrayList<MovimientoMensual> nueva = new ArrayList<>();
        lista_movimientos.stream().filter((m) -> (!m.isPago())).forEach((m) -> {
            nueva.add(m);
        });
        return nueva;
    }
    
    /**
     * Actualiza la tabla
     */
    private void cargarDatos(){
        //obtengo la lista de movimentos mensuales (ya que solo estos pueden quedar como impagos)
        lista_movimientos_mensuales = CMovimientoMensual.listarMovimientosMensuales();
        //Ordeno los movimientos por fecha de vencimiento en orden descendente
        ordenar(lista_movimientos_mensuales);
        //obtengo otra lista a partir de la anterior, en la que solo queden los movimientos impagos
        lista_movimientos_mensuales = filtrar(lista_movimientos_mensuales);
        //declaro listas para separar los impagos
        ArrayList<MovimientoMensual> vencidos = new ArrayList<>();
        ArrayList<MovimientoMensual> alDia = new ArrayList<>();
        ArrayList<MovimientoMensual> lista;
        
        //de acuerdo al combobox, muestro la lista completa o solo lo solicitado
        if (ddlOpcion.getSelectedIndex() == 0){
            lista = lista_movimientos_mensuales;
        }else{
            //agrego en la lista que corresponda cada movimiento y muestro de acuerdo a el combobox
            lista_movimientos_mensuales.stream().forEach((m) -> {
                if (m.isVencido()){
                    vencidos.add(m);
                }else{
                    alDia.add(m);
                }
            });
            if(ddlOpcion.getSelectedIndex()==1){
                lista = vencidos;
            }else{
                lista = alDia;
            }
        }
        
        //Creo un array con los titulos que usaran las tablas
        String[] titulos = {"Fecha de vencimiento","Categoría","Nombre","Monto Final","Vencido","Recargo","Monto","Tipo","Descripción"};
        //creo el modelo por defecto con las columnas del array
        DefaultTableModel dtb = new DefaultTableModel(titulos, 8);
        //establezco la cantidad de filas, que coincidira con lista
        dtb.setNumRows(lista.size());
        //aplico el modelo por defecto a la tabla
        tabla.setModel(dtb);
        //relleno la tabla
        int fila=0;
        for (MovimientoMensual m : lista){
            tabla.setValueAt(m.getFecha_de_vencimiento(), fila, 0);
            tabla.setValueAt(m.getCategoria().getNombre(), fila, 1);
            tabla.setValueAt(m.getNombre(), fila, 2);
            tabla.setValueAt(m.getMonto(), fila, 3);
            tabla.setValueAt(m.isVencido()?"Sí":"No", fila, 4);
            tabla.setValueAt(m.getRecargo(), fila, 5);
            tabla.setValueAt(m.getMontoSinRercargos(), fila, 6);
            tabla.setValueAt(m.isEs_ingreso()?"Ingreso":"Egreso", fila, 7);
            tabla.setValueAt(m.getDescripcion(), fila, 8);
            fila++;
        }
    }
    
    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        cargarDatos();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void ddlOpcionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ddlOpcionItemStateChanged
        cargarDatos();
    }//GEN-LAST:event_ddlOpcionItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnActualizar;
    private javax.swing.JComboBox<String> ddlOpcion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
